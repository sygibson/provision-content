{"Validated":false,"Available":false,"Errors":[],"ReadOnly":false,"Meta":{"color":"blue","feature-flags":"sane-exit-codes","icon":"cogs","title":"faasd-rpi"},"Endpoint":"","Bundle":"faasd-rpi","Name":"faasd-install","Description":"Install OpenFaaSD on Raspberry Pi","Documentation":"A task to install OpenFaaSD on Raspberry Pi\n","Templates":[{"Name":"faasd-install.sh","Path":"","ID":"","Contents":"#!/usr/bin/env bash\n# Install OpenFaaS on Raspberry Pi\n# reference: https://blog.alexellis.io/faasd-for-lightweight-serverless/\n\n# in the future this should be broken out into individual tasks for reusability\nset -e\n\n# Get access and who we are.\n{{template \"setup.tmpl\" .}}\n# sets FAASD_PLATFORM variable\n{{template \"faasd-platform.tmpl\" .}}\n\n    # install git if not already\necho \"\u003e\u003e\u003e Checking for 'git' dependency\"\nif ! which git \u003e /dev/null 2\u003e\u00261; then\n  which apt \u003e /dev/null 2\u003e\u00261 \u0026\u0026 INST=\"apt\" || true\n  which yum \u003e /dev/null 2\u003e\u00261 \u0026\u0026 INST=\"yum\" || true\n  $INST -y install git\nfi\n\n# these should become DRP Params\nVER_CONTAINERD=\"v1.3.2\"\nVER_CNI_PLUGIN=\"v0.8.4\"\nVER_FAAS_CONTAINERD=\"0.5.3\"\nVER_FAASD=\"0.5.0\"\n\nif ! echo $PATH | grep \"/usr/local/bin\" \u003e /dev/null; then\n  export PATH=/usr/local/bin:$PATH\n  if test -d /etc/profile.d; then\n    if ! test -r /etc/profile.d/local-bin-path.sh; then\n      echo \"\u003e\u003e\u003e Adding /etc/profile.d/local-bin-path.sh fixup.\"\n      echo 'if ! echo $PATH | grep \"/usr/local/bin\" \u003e /dev/null; then export PATH=/usr/local/bin:$PATH; fi' \\\n        | sudo tee /etc/profile.d/local-bin-path.sh \u003e /dev/null\n    fi\n  fi\nfi\n\necho \"\u003e\u003e\u003e Verifying 'sudo' allos path '/usr/local/bin'.\"\nif ! $(grep \"Defaults.*secure_path\" /etc/sudoers | grep -q \"/usr/local/bin\"); then\n  echo \"\u003e\u003e\u003e Fixing '/etc/sudoers' to include '/usr/local/bin' in 'secure_path'.\"\n  sed -i.bak 's|^\\(Defaults.*secure_path = \\)/|\\1/usr/local/bin:/|' /etc/sudoers\nfi\n\n# install faas-cli\necho \"\u003e\u003e\u003e Get FaaS CLI and install it\"\ncurl -sLfS https://cli.openfaas.com | sudo sh\nsudo systemctl stop containerd || true\n\n# trust Alex Ellis's pre-built ARMHF prebuilt containerd binaries\necho \"\u003e\u003e\u003e Install armhf containerd\"\ncurl -sSL https://github.com/alexellis/containerd-armhf/releases/download/${VER_CONTAINERD}/containerd.tgz | sudo tar -xvz --strip-components=2 -C /usr/local/bin/\n\n# get the systemd service file and start up containerd\necho \"\u003e\u003e\u003e Set up systemd service files for containerd\"\ncurl -SLfs https://raw.githubusercontent.com/containerd/containerd/${VER_CONTAINERD}/containerd.service | sudo tee /etc/systemd/system/containerd.service\nsudo systemctl daemon-reload\nsudo systemctl enable containerd\nsudo systemctl start containerd\n\n# Install Networking - One-off\necho \"\u003e\u003e\u003e Fix up networking 'br_netfilter' and 'bridge-nf-call-iptables'\"\nsudo modprobe br_netfilter\nsysctl net.bridge.bridge-nf-call-iptables=1\n# Make it permanent\necho \"br_netfilter\" | sudo tee -a /etc/modules-load.d/modules.conf\necho \"net.bridge.bridge-nf-call-iptables=1\" | sudo tee -a /etc/sysctl.conf\n\n# install netns for bridged container networking - future will use CNI\necho \"\u003e\u003e\u003e Install netns arm version for bridged container networking\"\nsudo curl -fSLs \"https://github.com/genuinetools/netns/releases/download/v0.5.3/netns-linux-arm\" \\\n  --output \"/usr/local/bin/netns\" \\\n  \u0026\u0026 sudo chmod a+x \"/usr/local/bin/netns\"\n\n# install CNI plugins\necho \"\u003e\u003e\u003e Install CNI plugins\"\nsudo mkdir -p /opt/cni/bin\ncurl -sSL https://github.com/containernetworking/plugins/releases/download/${VER_CNI_PLUGIN}/cni-plugins-linux-arm-${VER_CNI_PLUGIN}.tgz | sudo tar -xz -C /opt/cni/bin\n\n# enable NAT\necho \"\u003e\u003e\u003e Enable IP Forwarding/NAT\"\nsudo /sbin/sysctl -w net.ipv4.conf.all.forwarding=1\necho \"net.ipv4.conf.all.forwarding=1\" | sudo tee -a /etc/sysctl.conf\n\n### Install faasd and faasd-containerd\n\n# Stop systemd services, if you have them\n\nsudo systemctl stop faasd || true\nsudo systemctl stop faas-containerd || true\n\n# Remove old binaries if you have them\nsudo rm -rf /usr/local/bin/faas-containerd\nsudo rm -rf /usr/local/bin/faasd\n\n# Get/install the new ones\necho \"\u003e\u003e\u003e Install FaaS containerd\"\nsudo curl -sSLf \"https://github.com/alexellis/faas-containerd/releases/download/${VER_FAAS_CONTAINERD}/faas-containerd-armhf\" \\\n  --output \"/usr/local/bin/faas-containerd\" \\\n  \u0026\u0026 sudo chmod a+x \"/usr/local/bin/faas-containerd\"\necho \"\u003e\u003e\u003e Install FaaSD\"\nsudo curl -sSLf \"https://github.com/alexellis/faasd/releases/download/${VER_FAASD}/faasd-armhf\" \\\n  --output \"/usr/local/bin/faasd\" \\\n  \u0026\u0026 sudo chmod a+x \"/usr/local/bin/faasd\"\n\n# now run them\nexport GOPATH=$HOME/go/\nexport F_DIR=$GOPATH/src/github.com/alexellis\nmkdir -p $F_DIR\ncd $F_DIR\n\nif [[ -d faasd ]]; then\n  cd faasd\n  git checkout master\n  git pull\nelse\n  git clone https://github.com/alexellis/faasd\n  cd faasd\nfi\nsudo faasd install\n\nsudo systemctl daemon-reload\nsudo systemctl status faasd\nsudo systemctl status faas-containerd\n\nexit 0","Meta":null}],"RequiredParams":[],"OptionalParams":[],"Prerequisites":[]}