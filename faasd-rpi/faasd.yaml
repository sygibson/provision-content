meta:
  Author: Shane Gibson
  CodeSource: https://github.com/sygibson/provision-content/tree/master/faasd-rpi
  Color: blue
  Copyright: APLv2
  Description: Provides content to build OpenFaaSD Cluster on Raspberry Pi systems.
  DisplayName: OpenFaaSD Cluster on Raspberry Pi
  DocUrl: none
  Documentation: |-
    FaaSD on Raspberry PI Content Pack
    ==================================

    This content provides deployment and operational workflows to manage the OpenFaaS service
    on Raspberry Pi (RPi) platforms.


    Digital Rebar Platform
    ----------------------

    This content pack is designed to be deployed with the Digital Rebar Platform (DRP), maintained
    by RackN.  If you do not have DRP installed, you can check out the Quickstart documentation
    at:

      * https://portal.rackn.io/

    In addition, this content pack is designed to run on Raspberry Pi platforms.  This content
    pack was tested and built, using the Open Edge Lab reference hardware and build, designed to
    be driven by the Digital Rebar solution.  You can find more information on Open Edge Lab, at:

      * https://github.com/digitalrebar/edgelab


    Platform Requirements
    ---------------------

    This content and the FaaSD installation is aimed specifically at Raspberry Pi platforms.  This
    content pack has been tested with the Digital Rebar AARCH64 (ARMHF) Sledgehammer OS build.  It
    was written to be tolerant of Redhat based and Ubuntu based platform installs.  However, primary
    testing was completed on the Sledgehammer platform - which is a customized CentOS 7 distro.

    If you are testing on Debian/Ubuntu distros, you may need to adjust some of the tooling.  Please
    Fork and provide a pull request back to the original source tree (sygibson/faasd-rpi) with any
    enhancements.

    The Raspberry Pi platforms used were specifically 4b variants with 4 GB memory.  Since the
    Sledgehammer OS environment is purely in-memory (RAM boot / live boot) - the extra memory is
    necessary since the filesystem structures are carved out of memory space.  This is not a
    requirement for use of the system.  An installed to SD card OS should work equally well, and
    reduce the memory requirement.


    Operating This Content
    ----------------------

    There is one primary Workflow for installing the FaaSD solution, called ``faasd-install``.  This
    workflow installs and records the username/password basic auth information to interact with a
    single FaaSD service.

    In addition to the main install Workflow, there is ``faasd-test`` Workflow, which performs an
    installation, along with the following validation tests of the service:

      * ``faas-cli store list`` - see what functions are available in the public store
      * deploy the ``NodeInfo`` function to the service
      * test the operation of the ``NodeInfo`` function


    Future Enhancements
    -------------------

    Here are a few future enhancement possibilities for this content pack:

      * write a Context that installs a reverse proxy on the DRP Endpoint to create a
        load balanced access to the Machine members in the cluster
      * more operational workflows to extend daily interaction/operation of the cluster
      * determine if this tooling can be easily extrapolated to a non-platform (x86_64 vs arm)
        hardware install and management process

    Installation Reference
    ----------------------

    The initial installation process was modeled after Alex Ellis's ``FaaSD for Lightweight Serverless``
    posting, which can be found at:

      * https://blog.alexellis.io/faasd-for-lightweight-serverless/

    More operational and use patterns can be found on that page, after the installation instructions.
  Icon: cogs
  License: APLv2
  Name: faasd-rpi
  Order: ""
  Prerequisites: ""
  RequiredFeatures: ""
  Source: https://github.com/sygibson/provision-content/tree/master/faasd-rpi
  Tags: openfaas, faasd, raspberry pi, rpi
  Type: dynamic
  Version: v20.01.18-18.58.31
sections:
  params:
    faasd/basic-auth-password:
      Available: false
      Bundle: faasd-rpi
      Description: Recorded FaaSD password name
      Documentation: |
        This param will be added to the Machine object when the FaaSd installer completes
        successfully.  It records the password for authenticating to the FaaSD service.

        Do not set this value on the machine.
      Endpoint: ""
      Errors: []
      Meta:
        color: orange
        icon: user secret
        title: faasd-rpi
      Name: faasd/basic-auth-password
      ReadOnly: true
      Schema:
        type: string
      Secure: true
      Validated: false
    faasd/basic-auth-user:
      Available: false
      Bundle: faasd-rpi
      Description: Recorded FaaSD User name
      Documentation: |
        This param will be added to the Machine object when the FaaSd installer completes
        successfully.  It records the username for authenticating to the FaaSD service.

        Do not set this value on the machine.
      Endpoint: ""
      Errors: []
      Meta:
        color: orange
        icon: user
        title: faasd-rpi
      Name: faasd/basic-auth-user
      ReadOnly: true
      Schema:
        type: string
      Secure: false
      Validated: false
    faasd/function:
      Available: false
      Bundle: faasd-rpi
      Description: Specifies the function to operate on in a FaaSD command.
      Documentation: |
        This param defines the function to operate on for subsequent FaaSD commands.  This
        is typically used in the ``faasd-deploy-function`` Task.

        By default the ``NodeInfo`` function will be installed if this value is not set on
        a Machine.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: crosshairs
        title: faasd-rpi
      Name: faasd/function
      ReadOnly: true
      Schema:
        default: NodeInfo
        type: string
      Secure: false
      Validated: false
  stages:
    faasd-collect-auth:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: A stage to collect user/pass auth info on a FaaSD service.
      Documentation: |
        A stage to collect user/pass auth info on a FaaSD service.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: cogs
        title: faasd-rpi
      Name: faasd-collect-auth
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: true
      Tasks:
      - faasd-collect-auth
      Templates: []
      Validated: false
    faasd-deploy-function:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: A stage to deploy a FaaSD Function.
      Documentation: |
        A stage to deploy a FaaSD Function specified by the ``faasd/function`` Param.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: cogs
        title: faasd-rpi
      Name: faasd-deploy-function
      OptionalParams:
      - faasd/function
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: true
      Tasks:
      - faasd-deploy-function
      Templates: []
      Validated: false
    faasd-install:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: A stage to install the FaaSD service.
      Documentation: |
        A stage to install the FaaSD service.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: cogs
        title: faasd-rpi
      Name: faasd-install
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: true
      Tasks:
      - faasd-install
      Templates: []
      Validated: false
    faasd-invoke-NodeInfo:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: A stage to run the NodeInfo function for testing.
      Documentation: |
        A stage to run (invoke) the NodeInfo function; generally for testing
        purposes.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: crosshairs
        title: faasd-rpi
      Name: faasd-invoke-NodeInfo
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: true
      Tasks:
      - faasd-invoke-NodeInfo
      Templates: []
      Validated: false
    faasd-store-list:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: A stage to list functions available in the function store.
      Documentation: |
        A stage to list functions in the function store.  This function will dynamically determine
        platform architecture and request appropriate list for the platform.
      Endpoint: ""
      Errors: []
      Meta:
        color: purple
        icon: list
        title: faasd-rpi
      Name: faasd-store-list
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: true
      Tasks:
      - faasd-store-list
      Templates: []
      Validated: false
  tasks:
    faasd-collect-auth:
      Available: false
      Bundle: ""
      Description: Collect username and password auth info from FaaSD service install.
      Documentation: |
        Collect username and password auth info from FaaSD service install.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        feature-flags: sane-exit-codes
        icon: cogs
        title: faasd-rpi
      Name: faasd-collect-auth
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/usr/bin/env bash
          # Install OpenFaaS on Raspberry Pi
          # reference: https://blog.alexellis.io/faasd-for-lightweight-serverless/

          # in the future this should be broken out into individual tasks for reusability
          set -e

          # Get access and who we are.
          {{template "setup.tmpl" .}}
          # sets FAASD_PLATFORM variable
          {{template "faasd-platform.tmpl" .}}

          # collect and record infoz
          echo ">>> Record FaaSD user/password information"
          UF="/run/faasd/secrets/basic-auth-user"
          PF="/run/faasd/secrets/basic-auth-password"
          [[ -r "$UF" ]] && U=$(cat /run/faasd/secrets/basic-auth-user)
          [[ -r "$PF" ]] && P=$(cat /run/faasd/secrets/basic-auth-password)
          drpcli machines set ${RS_UUID} param faasd/basic-auth-user to $U
          drpcli machines set ${RS_UUID} param faasd/basic-auth-password to $P

          exit 0
        ID: ""
        Meta: null
        Name: faasd-collect-auth.sh
        Path: ""
      Validated: false
    faasd-deploy-function:
      Available: false
      Bundle: ""
      Description: Deploy function on an existing FaaSD service.
      Documentation: |
        A task to install function specified by the Param ``faasd/function`` on an
        OpenFaaSD service.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        feature-flags: sane-exit-codes
        icon: cogs
        title: faasd-rpi
      Name: faasd-deploy-function
      OptionalParams:
      - faasd/function
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/usr/bin/env bash
          # Deploy a FaasD function specified by faasd/function Param

          set -e

          # Get access and who we are.
          {{template "setup.tmpl" .}}
          # sets FAASD_PLATFORM variable
          {{template "faasd-platform.tmpl" .}}

          # make this a Param as input
          FUNC='{{ .Param "faasd/function" }}'
          echo ">>> Deploying FaaS function '$FUNC'"

          # Deploy NodeInfo
          faas-cli store deploy --platform ${FAASD_PLATFORM} "${FUNC}"
          faas-cli store inspect "${FUNC}"
        ID: ""
        Meta: null
        Name: faasd-deploy-function.sh
        Path: ""
      Validated: false
    faasd-install:
      Available: false
      Bundle: ""
      Description: Install OpenFaaSD on Raspberry Pi
      Documentation: |
        A task to install OpenFaaSD on Raspberry Pi
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        feature-flags: sane-exit-codes
        icon: cogs
        title: faasd-rpi
      Name: faasd-install
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/usr/bin/env bash
          # Install OpenFaaS on Raspberry Pi
          # reference: https://blog.alexellis.io/faasd-for-lightweight-serverless/

          # in the future this should be broken out into individual tasks for reusability
          set -e

          # Get access and who we are.
          {{template "setup.tmpl" .}}
          # sets FAASD_PLATFORM variable
          {{template "faasd-platform.tmpl" .}}

              # install git if not already
          echo ">>> Checking for 'git' dependency"
          if ! which git > /dev/null 2>&1; then
            which apt > /dev/null 2>&1 && INST="apt" || true
            which yum > /dev/null 2>&1 && INST="yum" || true
            $INST -y install git
          fi

          # these should become DRP Params
          VER_CONTAINERD="v1.3.2"
          VER_CNI_PLUGIN="v0.8.4"
          VER_FAAS_CONTAINERD="0.5.3"
          VER_FAASD="0.5.0"

          if ! echo $PATH | grep "/usr/local/bin" > /dev/null; then
            export PATH=/usr/local/bin:$PATH
            if test -d /etc/profile.d; then
              if ! test -r /etc/profile.d/local-bin-path.sh; then
                echo ">>> Adding /etc/profile.d/local-bin-path.sh fixup."
                echo 'if ! echo $PATH | grep "/usr/local/bin" > /dev/null; then export PATH=/usr/local/bin:$PATH; fi' \
                  | sudo tee /etc/profile.d/local-bin-path.sh > /dev/null
              fi
            fi
          fi

          echo ">>> Verifying 'sudo' allos path '/usr/local/bin'."
          if ! $(grep "Defaults.*secure_path" /etc/sudoers | grep -q "/usr/local/bin"); then
            echo ">>> Fixing '/etc/sudoers' to include '/usr/local/bin' in 'secure_path'."
            sed -i.bak 's|^\(Defaults.*secure_path = \)/|\1/usr/local/bin:/|' /etc/sudoers
          fi

          # install faas-cli
          echo ">>> Get FaaS CLI and install it"
          curl -sLfS https://cli.openfaas.com | sudo sh
          sudo systemctl stop containerd || true

          # trust Alex Ellis's pre-built ARMHF prebuilt containerd binaries
          echo ">>> Install armhf containerd"
          curl -sSL https://github.com/alexellis/containerd-armhf/releases/download/${VER_CONTAINERD}/containerd.tgz | sudo tar -xvz --strip-components=2 -C /usr/local/bin/

          # get the systemd service file and start up containerd
          echo ">>> Set up systemd service files for containerd"
          curl -SLfs https://raw.githubusercontent.com/containerd/containerd/${VER_CONTAINERD}/containerd.service | sudo tee /etc/systemd/system/containerd.service
          sudo systemctl daemon-reload
          sudo systemctl enable containerd
          sudo systemctl start containerd

          # Install Networking - One-off
          echo ">>> Fix up networking 'br_netfilter' and 'bridge-nf-call-iptables'"
          sudo modprobe br_netfilter
          sysctl net.bridge.bridge-nf-call-iptables=1
          # Make it permanent
          echo "br_netfilter" | sudo tee -a /etc/modules-load.d/modules.conf
          echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf

          # install netns for bridged container networking - future will use CNI
          echo ">>> Install netns arm version for bridged container networking"
          sudo curl -fSLs "https://github.com/genuinetools/netns/releases/download/v0.5.3/netns-linux-arm" \
            --output "/usr/local/bin/netns" \
            && sudo chmod a+x "/usr/local/bin/netns"

          # install CNI plugins
          echo ">>> Install CNI plugins"
          sudo mkdir -p /opt/cni/bin
          curl -sSL https://github.com/containernetworking/plugins/releases/download/${VER_CNI_PLUGIN}/cni-plugins-linux-arm-${VER_CNI_PLUGIN}.tgz | sudo tar -xz -C /opt/cni/bin

          # enable NAT
          echo ">>> Enable IP Forwarding/NAT"
          sudo /sbin/sysctl -w net.ipv4.conf.all.forwarding=1
          echo "net.ipv4.conf.all.forwarding=1" | sudo tee -a /etc/sysctl.conf

          ### Install faasd and faasd-containerd

          # Stop systemd services, if you have them

          sudo systemctl stop faasd || true
          sudo systemctl stop faas-containerd || true

          # Remove old binaries if you have them
          sudo rm -rf /usr/local/bin/faas-containerd
          sudo rm -rf /usr/local/bin/faasd

          # Get/install the new ones
          echo ">>> Install FaaS containerd"
          sudo curl -sSLf "https://github.com/alexellis/faas-containerd/releases/download/${VER_FAAS_CONTAINERD}/faas-containerd-armhf" \
            --output "/usr/local/bin/faas-containerd" \
            && sudo chmod a+x "/usr/local/bin/faas-containerd"
          echo ">>> Install FaaSD"
          sudo curl -sSLf "https://github.com/alexellis/faasd/releases/download/${VER_FAASD}/faasd-armhf" \
            --output "/usr/local/bin/faasd" \
            && sudo chmod a+x "/usr/local/bin/faasd"

          # now run them
          export GOPATH=$HOME/go/
          export F_DIR=$GOPATH/src/github.com/alexellis
          mkdir -p $F_DIR
          cd $F_DIR

          if [[ -d faasd ]]; then
            cd faasd
            git checkout master
            git pull
          else
            git clone https://github.com/alexellis/faasd
            cd faasd
          fi
          sudo faasd install

          sudo systemctl daemon-reload
          sudo systemctl status faasd
          sudo systemctl status faas-containerd

          exit 0
        ID: ""
        Meta: null
        Name: faasd-install.sh
        Path: ""
      Validated: false
    faasd-invoke-NodeInfo:
      Available: false
      Bundle: ""
      Description: Invokes the NodeInfo function on a FaaSD service.
      Documentation: |
        A task to invoke the NodeInfo function on a FaaSD service.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        feature-flags: sane-exit-codes
        icon: crosshairs
        title: faasd-rpi
      Name: faasd-invoke-NodeInfo
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/usr/bin/env bash
          # Invoke NodeInfo function on a FaaSD service.

          set -e

          # Get access and who we are.
          {{template "setup.tmpl" .}}

          echo ">>> Starting NodeInfo invoke function"

          # Deploy NodeInfo
          faas-cli invoke NodeInfo
        ID: ""
        Meta: null
        Name: faasd-invoke-NodeInfo.sh
        Path: ""
      Validated: false
    faasd-store-list:
      Available: false
      Bundle: ""
      Description: Show the faasd store functions that are available.
      Documentation: |
        A task to show the FaaSD store functions that are available for the platform.
      Endpoint: ""
      Errors: []
      Meta:
        color: purple
        feature-flags: sane-exit-codes
        icon: list
        title: faasd-rpi
      Name: faasd-store-list
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/usr/bin/env bash
          # Show the FaaSD store function that are available for the platform.

          set -e

          # Get access and who we are.
          {{template "setup.tmpl" .}}
          # sets FAASD_PLATFORM variable
          {{template "faasd-platform.tmpl" .}}

          echo ">>> Starting store list for FaaS functions"

          # Deploy NodeInfo
          faas-cli store list --platform ${FAASD_PLATFORM}
        ID: ""
        Meta: null
        Name: faasd-store-list.sh
        Path: ""
      Validated: false
  templates:
    faasd-platform.tmpl:
      Available: false
      Bundle: ""
      Contents: |
        # figure out our platform type for the function deploy
        P=$(uname -p)
        case $P in
          aarch64|armhf) export FAASD_PLATFORM="armhf"  ;;
          x86_64|amd64)  export FAASD_PLATFORM="x86_64" ;;
          *) echo "FATAL:  Unsupported platform type '$P'."
             exit 1 ;;
        esac
      Description: ""
      Endpoint: ""
      Errors: []
      ID: faasd-platform.tmpl
      Meta: {}
      ReadOnly: false
      Validated: false
  workflows:
    faasd-install:
      Available: false
      Bundle: ""
      Description: Install the FaaSD service on a Machine.
      Documentation: ""
      Endpoint: ""
      Errors: null
      Meta:
        color: blue
        icon: cogs
        title: faasd-rpi
      Name: faasd-install
      ReadOnly: false
      Stages:
      - faasd-install
      - faasd-collect-auth
      Validated: false
    faasd-test:
      Available: false
      Bundle: ""
      Description: An end-to-end install, function deploy, and test workflow for FaaSD.
      Documentation: |
        This workflow will run the ``faasd-install`` stage, deploy the ``NodeInfo`` function
        on the Machine, then invoke the function to fully test end-to-end deployment and
        use of this content pack.
      Endpoint: ""
      Errors: null
      Meta:
        color: black
        icon: flag checkered
        title: faasd-rpi
      Name: faasd-test
      ReadOnly: false
      Stages:
      - faasd-install
      - faasd-collect-auth
      - faasd-store-list
      - faasd-deploy-function
      - faasd-invoke-NodeInfo
      Validated: false
